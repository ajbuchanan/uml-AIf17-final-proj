/*  Copyright 2017 George Le

    Declaration of classes Neuron and FF_ANN.
*/

#ifndef FEEDFORWARDANN_HPP
#define FEEDFORWARDANN_HPP

#include <map> // std::map
#include <memory> // std::shared_ptr
#include <utility> // std::pair
#include <vector> // std::vector

#include "ANN_neuron.hpp"

/*
	A feedforward artificial neural network that contains three distinct layers of neurons: an input layer, one or more
	hidden layers, and an output layer; given a series of inputs, the inputs will be evaluated through the neuron layers
	in only one direction so that cycles or loops do not exist in the network. 
*/
class FF_ANN
{
public:
	// default constructor
 	FF_ANN() { }

	// accessor functions
	unsigned int number_of_hidden_layers() const { return m_main_neural_network.size();  }
	unsigned int hidden_layer_size(int hidden_layer_location) const { return m_main_neural_network.at(hidden_layer_location).size(); }

	// mutator functions

	/*-------------------------------------------------------------------------
	This function adds a layer at either the input layer of the FF_ANN
	It accepts a vector of neurons for the input layer of the neural net
	--------------------------------------------------------------------------*/
	bool push_back(std::vector<InputLayerNeuron> layer);
	/*-------------------------------------------------------------------------
	This function adds a layer at either the output layer of the FF_ANN
	It accepts a vector of neurons for the output layer of the neural net
	--------------------------------------------------------------------------*/
	bool push_back(std::vector<OutputLayerNeuron> layer);
	/*-------------------------------------------------------------------
	This overloaded function adds a layer hidden layer of the FF_ANN
	It accepts a vector of neurons and the index of the hidden layer
	--------------------------------------------------------------------*/
	bool push_back(std::vector<HiddenLayerNeuron> layer, unsigned int hidden_layer_location);

	/*--------------------------------------------------------------------------------
	This function evaluates the neural network and returns the result generated by the
 	neuron in the FF_NN's output layer with the highest output value.
	---------------------------------------------------------------------------------*/
	std::string evaluate_neural_net();

	// debug function


private:
	// holds hidden layers of the artificial neural network
	std::map<unsigned int, std::vector<HiddenLayerNeuron>> m_main_neural_network;

	// holds the neurons of the input layer
	std::vector<InputLayerNeuron> m_input_layer;

	// holds the neurons of the output layer
	std::vector<OutputLayerNeuron> m_output_layer;
};

#endif // FEEDFORWARDANN_HPP