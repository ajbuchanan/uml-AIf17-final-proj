/*  Copyright 2017 George Le

    Declaration of classes Neuron and ANN.

    Summary:
    class Neuron
        -private data members
            -vector<double> m_input vector
            -vector<double> m_weight
            -double m_bias
            -double m_summation
            -bool summation_complete
        -public members    
            -default constructor (EMPTY)
            -accessor functions
            -double summation_weight_input_vector();
            Transfer functions
                -bool step_function()
                -double sigmoid_function()

    class ANN
        -private data member
            -std::map<unsigned int, std::vector<Neuron>> m_neural_network
        -public members
            -default constructor (EMPTY)
            -accessor function
            -bool push_back(std::vector<Neuron> layer, char input_or_output); 
            -bool push_back(std::vector<Neuron> layer, unsigned int hidden_layer_location);
*/

#ifndef ANN_HPP
#define ANN_HPP

#include <map>
#include <vector>

/*  

*/
class Neuron
{
    public:
    // default constructor
    Neuron();

    // accessor functions
    double get_input_vector(int index) { return m_input_vector.at(index); }
    double get_input_weight(int index) { return m_input_weight.at(index); }
    double get_bias() { return m_bias; }
    
    private:
    /*
        Calculates u = (summation of wi * xi - bias)
    */
    double summation_weight_input_vector();
    
    // Transfer Functions
    public:
    /*---------------------------------------------------------
        Perceptron Implementation
        
        Implements the piecewise function

        yk = { 1 if u >= 0, 0 if u < 0 }, where u = summation of wi * xi - bias

        Returns true if m_summation >= 0 and returns false if m_summation < 0
    ----------------------------------------------------------*/
    bool step_function();

    /*---------------------------------------------------------------------
        Sigmoid Implementation

        Function that implements the following function
        for the k'th neuron 
        yk = phi * summation, where phi is the sigmoid function -> 1/(1-e^-x)
        and the summation = (summation of wi * xi - bias)

        And returns a double percision value yk between 1 and 0
    ----------------------------------------------------------------------*/
    double sigmoid_function();

    private:
    // a vector of all input vectors from either the inputs
    // or the outputs of the neurons of the previous layers
    std::vector<double> m_input_vectors;
    // should not be used if Neuron is in input layer
    std::vector<double> m_input_weights;
    // bias value of the neuron (optional), which has values less
    // than the bias ignored by the neural network
    double m_bias;

    // summation calculated in summation_weight_input_vector()
    double m_summation;
    // does not allow transfer functions to work until summation
    // has been calculated
    // reset after use in transfer functions
    bool summation_complete;
}

/*  
    An Artificial Neural Network 
*/
class ANN 
{
    public:
    // default constructor
    ANN();
    
    // accessor functions
    unsigned int number_of_hidden_layers() const { return m_neural_network.size() - 2; }
    unsigned int hidden_layer_size(int hidden_layer_location) const { 
        return m_neural_network.at(hidden_layer_location).size();
    }

    // mutator functions

    /*----------------------------------------------------------------------------------------
        This function adds a layer at either the input or the output layer of the ANN
        It accepts a vector of neurons and a character input of either 'i' and 'o' (lowercase)
    -----------------------------------------------------------------------------------------*/
    bool push_back(std::vector<Neuron> layer, char input_or_output); 
    /*-------------------------------------------------------------------
        This overloaded function adds a layer hidden layer of the ANN
        It accepts a vector of neurons and the index of the hidden layer
    --------------------------------------------------------------------*/
    bool push_back(std::vector<Neuron> layer, unsigned int hidden_layer_location);
    
    /*
        This function evaluates the neural network and returns the result generated by the 
        ANN.
    */
    std::string evaluate_neural_net();

    // debug function


    private:
    // holds the n layers of the artificial neural network, where the vector<Neuron> at the
    // zero'th position is the input layer, 1 -> n-1 position is the hidden layer, and
    // the n'th layer is the output layer
    std::map<unsigned int, std::vector<Neuron>> m_neural_network;

    // holds what each of the neurons in the output layer represent, function evaluate_neural_net()
    // returns the std::string at the same index as the neuron in the output layer.
    std::map<unsigned int, std::string> output_representations; 
}

#endif // ANN_HPP